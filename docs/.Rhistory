library(ggplot2)
library(stringr)
raw_data <- read.csv("https://raw.githubusercontent.com/samato0624/DATA607_Project3/main/Raw_Data.csv")
the_great_filter <- c("color", "national origin", "religion", "sexual orientation", "age", "disability", "gender", "sex", "marital status", "veteran status", "dental", "ethnicity", "race", "genetic information")
skills <- raw_data %>%
mutate(Pay.Range = (str_remove_all(Pay.Range, "[$yr////, ]"))) %>%
mutate(Pay_Min = as.numeric(str_extract(Pay.Range, "\\d+(?=-)"))) %>%
mutate(Pay_Max = as.numeric(str_extract(Pay.Range, "(?<=-)[0-9]+"))) %>%
select(c(2, 3, 5, 6, 7, 8)) %>%
separate_longer_delim(About.the.job, ",")
skill_count <- skills %>%
count(About.the.job) %>%
mutate(About.the.job = str_remove_all(About.the.job, "[0-9]")) %>%
filter(!str_detect(`About.the.job`, paste(the_great_filter, collapse = "|"))) %>%
arrange(desc(n))
print(skills)
print(skill_count)
the_great_filter <- c("color", "national origin", "religion", "sexual orientation", "age", "disability", "gender", "sex", "marital status", "veteran status", "dental", "ethnicity", "race", "genetic information")
skills <- raw_data %>%
mutate(Pay.Range = (str_remove_all(Pay.Range, "[$yr////, ]"))) %>%
mutate(Pay_Min = as.numeric(str_extract(Pay.Range, "\\d+(?=-)"))) %>%
mutate(Pay_Max = as.numeric(str_extract(Pay.Range, "(?<=-)[0-9]+"))) %>%
select(c(2, 3, 5, 6, 7, 8)) %>%
separate_longer_delim(About.the.job, ",")
skill_count <- skills %>%
count(About.the.job) %>%
mutate(About.the.job = str_remove_all(About.the.job, "[0-9]")) %>%
filter(!str_detect(`About.the.job`, paste(the_great_filter, collapse = "|"))) %>%
arrange(desc(n)) %>%
top_n(20)
print(skills)
print(skill_count)
ggplot(skill_count, aes(x = About.the.job)) + geom_bar(stat = "n", fill = "steelblue") +
theme_classic() +
coord_flip()
ggplot(skill_count, aes(x = About.the.job)) + geom_bar(stat = n, fill = "steelblue") +
theme_classic() +
coord_flip()
ggplot(skill_count, aes(x = About.the.job, y = n)) + geom_bar(stat = "identity", fill = "steelblue") +
theme_classic() +
coord_flip() +
labs(x = "Skills", y = "Count")
ggplot(skill_count, aes(x = reorder(About.the.job, n), y = n)) + geom_bar(stat = "identity", fill = "steelblue") +
theme_classic() +
coord_flip() +
labs(x = "Skills", y = "Count")
the_great_filter <- c("color", "national origin", "religion", "sexual orientation", "age", "disability", "gender", "sex", "marital status", "veteran status", "dental", "ethnicity", "race", "genetic information")
skills <- raw_data %>%
mutate(Pay.Range = (str_remove_all(Pay.Range, "[$yr////, ]"))) %>%
mutate(Pay_Min = as.numeric(str_extract(Pay.Range, "\\d+(?=-)"))) %>%
mutate(Pay_Max = as.numeric(str_extract(Pay.Range, "(?<=-)[0-9]+"))) %>%
select(c(2, 3, 5, 6, 7, 8)) %>%
separate_longer_delim(About.the.job, ",")
skill_count <- skills %>%
count(About.the.job) %>%
mutate(About.the.job = str_remove_all(About.the.job, "[0-9]")) %>%
filter(!str_detect(`About.the.job`, paste(the_great_filter, collapse = "|"))) %>%
arrange(desc(n)) %>%
print(skills)
print(skill_count)
the_great_filter <- c("color", "national origin", "religion", "sexual orientation", "age", "disability", "gender", "sex", "marital status", "veteran status", "dental", "ethnicity", "race", "genetic information")
skills <- raw_data %>%
mutate(Pay.Range = (str_remove_all(Pay.Range, "[$yr////, ]"))) %>%
mutate(Pay_Min = as.numeric(str_extract(Pay.Range, "\\d+(?=-)"))) %>%
mutate(Pay_Max = as.numeric(str_extract(Pay.Range, "(?<=-)[0-9]+"))) %>%
select(c(2, 3, 5, 6, 7, 8)) %>%
separate_longer_delim(About.the.job, " ")
skill_count <- skills %>%
count(About.the.job) %>%
mutate(About.the.job = str_remove_all(About.the.job, "[0-9]")) %>%
filter(!str_detect(`About.the.job`, paste(the_great_filter, collapse = "|"))) %>%
arrange(desc(n)) %>%
print(skills)
print(skill_count)
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(tidyverse)
library(dplyr)
data_scientist_skills_list <- read.csv("https://raw.githubusercontent.com/samato0624/DATA607_Project3/main/docs/data_scientist_skills.csv")
data_scientist_skills_list <- data_scientist_skills_list[-1,]
unique_skills_list <- data.frame(skills_list = unlist(data_scientist_skills_list))
unique_skills_list <- unique_skills_list %>%
filter(skills_list != "") %>%
group_by(skills_list) %>%
mutate(count = length(skills_list)) %>%
distinct(skills_list,count) %>%
arrange(desc(count), skills_list)
rownames(unique_skills_list) <- NULL
final_skills_list <- unique_skills_list[c(1:9,12,13,17,19,22,24,27:29,32,34,36:37,39,40,43,45,47:50,52,53,58,59,61,62,64,66,71,72,76,77,79:81,83:87),1]
final_skills_list <- final_skills_list %>% arrange(skills_list)
final_skills_list$skills_list <- tolower(final_skills_list$skills_list)
final_skills_list$skills_list[38] <- " r "
final_skills_list
raw_data <- read.csv("https://raw.githubusercontent.com/samato0624/DATA607_Project3/main/Raw_Data.csv")
skills <- raw_data %>%
mutate(Pay.Range = (str_remove_all(Pay.Range, "[$yr////, ]"))) %>%
mutate(Pay_Min = as.numeric(str_extract(Pay.Range, "\\d+(?=-)"))) %>%
mutate(Pay_Max = as.numeric(str_extract(Pay.Range, "(?<=-)[0-9]+"))) %>%
select(c(2, 3, 5, 6, 7, 8))
skills
skills_data <- final_skills_list
for(i in 1:nrow(skills_data)) {
skills_data$postings[i] <- as.numeric(skills %>% filter(str_detect(tolower(About.the.job),skills_data$skills_list[i])) %>% summarise(n = n()))
}
skills_data <- skills_data %>% filter(postings != 0)
for(i in 1:nrow(skills_data)) {
skills_data$avg_min_sal[i] <- as.numeric(skills %>% drop_na(Pay_Min) %>% filter(str_detect(tolower(About.the.job),skills_data$skills_list[i])) %>% summarise(avg = mean(Pay_Min)))
}
skills_data_postings <- skills_data %>% arrange(desc(postings))
skills_data_postings
skills_data_sal <- skills_data %>% filter(postings >= 5) %>% arrange(desc(avg_min_sal))
skills_data_sal
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(tidyverse)
library(dplyr)
data_scientist_skills_list <- read.csv("https://raw.githubusercontent.com/samato0624/DATA607_Project3/main/docs/data_scientist_skills.csv")
data_scientist_skills_list <- data_scientist_skills_list[-1,]
unique_skills_list <- data.frame(skills_list = unlist(data_scientist_skills_list))
unique_skills_list <- unique_skills_list %>%
filter(skills_list != "") %>%
group_by(skills_list) %>%
mutate(count = length(skills_list)) %>%
distinct(skills_list,count) %>%
arrange(desc(count), skills_list)
rownames(unique_skills_list) <- NULL
final_skills_list <- unique_skills_list[c(1:9,12,13,17,19,22,24,27:29,32,34,36:37,39,40,43,45,47:50,52,53,58,59,61,62,64,66,71,72,76,77,79:81,83:87),1]
final_skills_list <- final_skills_list %>% arrange(skills_list)
final_skills_list$skills_list <- tolower(final_skills_list$skills_list)
final_skills_list$skills_list[38] <- " r "
final_skills_list
raw_data <- read.csv("https://raw.githubusercontent.com/samato0624/DATA607_Project3/main/Raw_Data.csv")
skills <- raw_data %>%
mutate(Pay.Range = (str_remove_all(Pay.Range, "[$yr////, ]"))) %>%
mutate(Pay_Min = as.numeric(str_extract(Pay.Range, "\\d+(?=-)"))) %>%
mutate(Pay_Max = as.numeric(str_extract(Pay.Range, "(?<=-)[0-9]+"))) %>%
select(c(2, 3, 5, 6, 7, 8))
skills
skills_data <- final_skills_list
for(i in 1:nrow(skills_data)) {
skills_data$postings[i] <- as.numeric(skills %>% filter(str_detect(tolower(About.the.job),skills_data$skills_list[i])) %>% summarise(n = n()))
}
skills_data <- skills_data %>% filter(postings != 0)
for(i in 1:nrow(skills_data)) {
skills_data$avg_min_sal[i] <- as.numeric(skills %>% drop_na(Pay_Min) %>% filter(str_detect(tolower(About.the.job),skills_data$skills_list[i])) %>% summarise(avg = mean(Pay_Min)))
}
skills_data_postings <- skills_data %>% arrange(desc(postings))
skills_data_postings
skills_data_sal <- skills_data %>% filter(postings >= 5) %>% arrange(desc(avg_min_sal))
skills_data_sal
skills_data_sal$skills_list <- factor(skills_data_sal$skills_list, levels = skills_data_sal$skills_list[order(skills_data_sal$postings, decreasing = FALSE)])
ggplot(skills_data_sal, aes(x = skills_list, y = postings, fill = skills_list)) +
geom_bar(stat = "identity", show.legend = FALSE) +
labs(title = "Number of Postings by Skill", x = "Skill", y = "Frequency") +
coord_flip()
skills_data_sal$skills_list <- factor(skills_data_sal$skills_list, levels = skills_data_sal$skills_list[order(skills_data_sal$avg_min_sal, decreasing = FALSE)])
ggplot(skills_data_sal, aes(x = skills_list, y = avg_min_sal, fill = skills_list)) +
geom_bar(stat = "identity", show.legend = FALSE) +
labs(title = "Average Minimum Salary by Skill", x = "Skill", y = "Average Minimum Salary (dollars per year)") +
coord_flip()
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(tidyverse)
library(dplyr)
data_scientist_skills_list <- read.csv("https://raw.githubusercontent.com/samato0624/DATA607_Project3/main/docs/data_scientist_skills.csv")
data_scientist_skills_list <- data_scientist_skills_list[-1,]
unique_skills_list <- data.frame(skills_list = unlist(data_scientist_skills_list))
unique_skills_list <- unique_skills_list %>%
filter(skills_list != "") %>%
group_by(skills_list) %>%
mutate(count = length(skills_list)) %>%
distinct(skills_list,count) %>%
arrange(desc(count), skills_list)
rownames(unique_skills_list) <- NULL
final_skills_list <- unique_skills_list[c(1:9,12,13,17,19,22,24,27:29,32,34,36:37,39,40,43,45,47:50,52,53,58,59,61,62,64,66,71,72,76,77,79:81,83:87),1]
final_skills_list <- final_skills_list %>% arrange(skills_list)
final_skills_list$skills_list <- tolower(final_skills_list$skills_list)
final_skills_list$skills_list[38] <- " r "
final_skills_list
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(tidyverse)
library(dplyr)
data_scientist_skills_list <- read.csv("https://raw.githubusercontent.com/samato0624/DATA607_Project3/main/docs/data_scientist_skills.csv")
data_scientist_skills_list <- data_scientist_skills_list[-1,]
unique_skills_list <- data.frame(skills_list = unlist(data_scientist_skills_list))
unique_skills_list <- unique_skills_list %>%
filter(skills_list != "") %>%
group_by(skills_list) %>%
mutate(count = length(skills_list)) %>%
distinct(skills_list,count) %>%
arrange(desc(count), skills_list)
rownames(unique_skills_list) <- NULL
final_skills_list <- unique_skills_list[c(1:9,12,13,17,19,22,24,27:29,32,34,36:37,39,40,43,45,47:50,52,53,58,59,61,62,64,66,71,72,76,77,79:81,83:87),1]
final_skills_list <- final_skills_list %>% arrange(skills_list)
final_skills_list$skills_list <- tolower(final_skills_list$skills_list)
final_skills_list$skills_list[38] <- " r "
final_skills_list
raw_data <- read.csv("https://raw.githubusercontent.com/samato0624/DATA607_Project3/main/Raw_Data.csv")
job_posts <- raw_data %>%
# removed unwanted characters
mutate(Pay.Range = (str_remove_all(Pay.Range, "[$yr////, ]"))) %>%
# extracted min salary from pay range column
mutate(Pay_Min = as.numeric(str_extract(Pay.Range, "\\d+(?=-)"))) %>%
# extracted max salary from pay range column
mutate(Pay_Max = as.numeric(str_extract(Pay.Range, "(?<=-)[0-9]+"))) %>%
# selected only necessary columns
select(c(2, 3, 5, 6, 7, 8))
job_posts
skills_data <- final_skills_list
for(i in 1:nrow(skills_data)) {
skills_data$postings[i] <- as.numeric(job_posts %>% filter(str_detect(tolower(About.the.job),skills_data$skills_list[i])) %>% summarise(n = n()))
}
skills_data <- skills_data %>% filter(postings != 0)
for(i in 1:nrow(skills_data)) {
skills_data$avg_min_sal[i] <- as.numeric(job_posts %>% drop_na(Pay_Min) %>% filter(str_detect(tolower(About.the.job),skills_data$skills_list[i])) %>% summarise(avg = mean(Pay_Min)))
}
skills_data_postings <- skills_data %>% arrange(desc(postings))
skills_data_postings
skills_data_sal <- skills_data %>% filter(postings >= 5) %>% arrange(desc(avg_min_sal))
skills_data_sal
skills_data_sal$skills_list <- factor(skills_data_sal$skills_list, levels = skills_data_sal$skills_list[order(skills_data_sal$postings, decreasing = FALSE)])
ggplot(skills_data_sal, aes(x = skills_list, y = postings, fill = skills_list)) +
geom_bar(stat = "identity", show.legend = FALSE) +
labs(title = "Number of Postings by Skill", x = "Skill", y = "Frequency") +
coord_flip()
skills_data_sal$skills_list <- factor(skills_data_sal$skills_list, levels = skills_data_sal$skills_list[order(skills_data_sal$avg_min_sal, decreasing = FALSE)])
ggplot(skills_data_sal, aes(x = skills_list, y = avg_min_sal, fill = skills_list)) +
geom_bar(stat = "identity", show.legend = FALSE) +
labs(title = "Average Minimum Salary by Skill", x = "Skill", y = "Average Minimum Salary (dollars per year)") +
coord_flip()
library(tidyverse)
library(openintro)
data('hfi', package='openintro')
hfi
plot(hfi$pf_expression_control, hfi$pf_score)
plot(hfi$pf_expression_control.as(control), hfi$pf_score)
plot(hfi$pf_expression_control, hfi$pf_score)
hfi %>%
summarise(cor(pf_expression_control, pf_score, use = "complete.obs"))
# This will only work interactively (i.e. will not show in the knitted document)
hfi <- hfi %>% filter(complete.cases(pf_expression_control, pf_score))
DATA606::plot_ss(x = hfi$pf_expression_control, y = hfi$pf_score)
# This will only work interactively (i.e. will not show in the knitted document)
hfi <- hfi %>% filter(complete.cases(pf_expression_control, pf_score))
DATA606::plot_ss(x = hfi$pf_expression_control, y = hfi$pf_score)
# This will only work interactively (i.e. will not show in the knitted document)
hfi <- hfi %>% filter(complete.cases(pf_expression_control, pf_score))
DATA606::plot_ss(x = hfi$pf_expression_control, y = hfi$pf_score)
# This will only work interactively (i.e. will not show in the knitted document)
hfi <- hfi %>% filter(complete.cases(pf_expression_control, pf_score))
DATA606::plot_ss(x = hfi$pf_expression_control, y = hfi$pf_score)
# This will only work interactively (i.e. will not show in the knitted document)
hfi <- hfi %>% filter(complete.cases(pf_expression_control, pf_score))
DATA606::plot_ss(x = hfi$pf_expression_control, y = hfi$pf_score)
# This will only work interactively (i.e. will not show in the knitted document)
hfi <- hfi %>% filter(complete.cases(pf_expression_control, pf_score))
DATA606::plot_ss(x = hfi$pf_expression_control, y = hfi$pf_score)
# This will only work interactively (i.e. will not show in the knitted document)
hfi <- hfi %>% filter(complete.cases(pf_expression_control, pf_score))
DATA606::plot_ss(x = hfi$pf_expression_control, y = hfi$pf_score)
# This will only work interactively (i.e. will not show in the knitted document)
hfi <- hfi %>% filter(complete.cases(pf_expression_control, pf_score))
DATA606::plot_ss(x = hfi$pf_expression_control, y = hfi$pf_score)
# This will only work interactively (i.e. will not show in the knitted document)
hfi <- hfi %>% filter(complete.cases(pf_expression_control, pf_score))
DATA606::plot_ss(x = hfi$pf_expression_control, y = hfi$pf_score)
DATA606::plot_ss(x = hfi$pf_expression_control, y = hfi$pf_score, showSquares = TRUE)
DATA606::plot_ss(x = hfi$pf_expression_control, y = hfi$pf_score, showSquares = TRUE)
m1 <- lm(pf_score ~ pf_expression_control, data = hfi)
summary(m1)
m2 <- lm(hf_score ~ pf_expression_control, data = hfi)
summary(m2)
ggplot(data = hfi, aes(x = pf_expression_control, y = pf_score)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(tidyverse)
library(dplyr)
library(knitr)
library(ggplot2)
library(scales)
data_scientist_skills_list <- read.csv("https://raw.githubusercontent.com/samato0624/DATA607_Project3/main/docs/data_scientist_skills.csv")
data_scientist_skills_list <- data_scientist_skills_list[-1,]
unique_skills_list <- data.frame(skills_list = unlist(data_scientist_skills_list))
unique_skills_list <- unique_skills_list %>%
filter(skills_list != "") %>%
group_by(skills_list) %>%
mutate(count = length(skills_list)) %>%
distinct(skills_list,count) %>%
arrange(desc(count), skills_list)
rownames(unique_skills_list) <- NULL
final_skills_list <- unique_skills_list[c(1:9,12,13,17,19,22,24,27:29,32,34,36:37,39,40,43,45,47:50,52,53,58,59,61,62,64,66,71,72,76,77,79:81,83:87),1]
final_skills_list <- final_skills_list %>% arrange(skills_list)
final_skills_list$skills_list <- tolower(final_skills_list$skills_list)
final_skills_list$skills_list[38] <- " r "
kable(final_skills_list, format = "pipe", col.names = c(""), caption = "Skills for Data Scientists", align = "c")
raw_data <- read.csv("https://raw.githubusercontent.com/samato0624/DATA607_Project3/main/Raw_Data.csv")
skills <- raw_data %>%
# removed unnecessary characters
mutate(Pay.Range = (str_remove_all(Pay.Range, "[$yr////, ]"))) %>%
# extracted the low end of the pay range
mutate(Pay_Min = as.numeric(str_extract(Pay.Range, "\\d+(?=-)"))) %>%
# extracted the high end of the pay range
mutate(Pay_Max = as.numeric(str_extract(Pay.Range, "(?<=-)[0-9]+"))) %>%
# selected important columns
select(c(2, 3, 5, 6, 7, 8))
##job_postings_subset <- skills[1:3, ]
##kable(job_postings_subset, format = "pipe", col.names = c("Company", "Title", "Description", "Locale", "Minimum Salary", "Maximum Salary"), caption = "Sample Job Postings", align = "c")
skills_data <- final_skills_list
for(i in 1:nrow(skills_data)) {
skills_data$postings[i] <- as.numeric(skills %>% filter(str_detect(tolower(About.the.job),skills_data$skills_list[i])) %>% summarise(n = n()))
}
skills_data <- skills_data %>% filter(postings != 0)
for(i in 1:nrow(skills_data)) {
skills_data$avg_min_sal[i] <- as.numeric(skills %>% drop_na(Pay_Min) %>% filter(str_detect(tolower(About.the.job),skills_data$skills_list[i])) %>% summarise(avg = mean(Pay_Min)))
}
skills_data$avg_min_sal <- dollar(skills_data$avg_min_sal)
kable(skills_data, format = "pipe", col.names = c("Skill", "Number of Postings", "Average Minimum Salary"), caption = "Skills for Data Scientists", align = "c", digits = 0)
skills_data_filtered <- skills_data %>% filter(postings >= 5)
skills_data_filtered$skills_list <- factor(skills_data_filtered$skills_list, levels = skills_data_filtered$skills_list[order(skills_data_filtered$postings, decreasing = FALSE)])
ggplot(skills_data_filtered, aes(x = skills_list, y = postings, fill = skills_list)) +
geom_bar(stat = "identity", show.legend = FALSE) +
labs(title = "Number of Postings by Skill", x = "Skill", y = "Frequency") +
coord_flip()
skills_data_filtered$skills_list <- factor(skills_data_filtered$skills_list, levels = skills_data_filtered$skills_list[order(skills_data_filtered$avg_min_sal, decreasing = FALSE)])
skills_data_filtered$avg_min_sal <- parse_number(skills_data_filtered$avg_min_sal)
ggplot(skills_data_filtered, aes(x = skills_list, y = avg_min_sal, fill = skills_list)) +
geom_bar(stat = "identity", show.legend = FALSE) +
labs(title = "Average Minimum Salary by Skill", x = "Skill", y = "Average Minimum Salary (dollars per year)") +
coord_flip()
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(tidyverse)
library(dplyr)
library(knitr)
library(ggplot2)
library(scales)
data_scientist_skills_list <- read.csv("https://raw.githubusercontent.com/samato0624/DATA607_Project3/main/docs/data_scientist_skills.csv")
data_scientist_skills_list <- data_scientist_skills_list[-1,]
unique_skills_list <- data.frame(skills_list = unlist(data_scientist_skills_list))
unique_skills_list <- unique_skills_list %>%
filter(skills_list != "") %>%
group_by(skills_list) %>%
mutate(count = length(skills_list)) %>%
distinct(skills_list,count) %>%
arrange(desc(count), skills_list)
rownames(unique_skills_list) <- NULL
final_skills_list <- unique_skills_list[c(1:9,12,13,17,19,22,24,27:29,32,34,36:37,39,40,43,45,47:50,52,53,58,59,61,62,64,66,71,72,76,77,79:81,83:87),1]
final_skills_list <- final_skills_list %>% arrange(skills_list)
final_skills_list$skills_list <- tolower(final_skills_list$skills_list)
final_skills_list$skills_list[38] <- " r "
kable(final_skills_list, format = "pipe", col.names = c(""), caption = "Skills for Data Scientists", align = "c")
raw_data <- read.csv("https://raw.githubusercontent.com/samato0624/DATA607_Project3/main/Raw_Data.csv")
skills <- raw_data %>%
# removed unnecessary characters
mutate(Pay.Range = (str_remove_all(Pay.Range, "[$yr////, ]"))) %>%
# extracted the low end of the pay range
mutate(Pay_Min = as.numeric(str_extract(Pay.Range, "\\d+(?=-)"))) %>%
# extracted the high end of the pay range
mutate(Pay_Max = as.numeric(str_extract(Pay.Range, "(?<=-)[0-9]+"))) %>%
# selected important columns
select(c(2, 3, 5, 6, 7, 8))
##job_postings_subset <- skills[1:3, ]
##kable(job_postings_subset, format = "pipe", col.names = c("Company", "Title", "Description", "Locale", "Minimum Salary", "Maximum Salary"), caption = "Sample Job Postings", align = "c")
skills_data <- final_skills_list
for(i in 1:nrow(skills_data)) {
skills_data$postings[i] <- as.numeric(skills %>% filter(str_detect(tolower(About.the.job),skills_data$skills_list[i])) %>% summarise(n = n()))
}
skills_data <- skills_data %>% filter(postings != 0)
for(i in 1:nrow(skills_data)) {
skills_data$avg_min_sal[i] <- as.numeric(skills %>% drop_na(Pay_Min) %>% filter(str_detect(tolower(About.the.job),skills_data$skills_list[i])) %>% summarise(avg = mean(Pay_Min)))
}
skills_data$avg_min_sal <- dollar(skills_data$avg_min_sal)
kable(skills_data, format = "pipe", col.names = c("Skill", "Number of Postings", "Average Minimum Salary"), caption = "Skills for Data Scientists", align = "c", digits = 0)
skills_data_filtered <- skills_data %>% filter(postings >= 5)
skills_data_filtered$skills_list <- factor(skills_data_filtered$skills_list, levels = skills_data_filtered$skills_list[order(skills_data_filtered$postings, decreasing = FALSE)])
ggplot(skills_data_filtered, aes(x = skills_list, y = postings, fill = skills_list)) +
geom_bar(stat = "identity", show.legend = FALSE) +
labs(title = "Number of Postings by Skill", x = "Skill", y = "Frequency") +
coord_flip()
skills_data_filtered$skills_list <- factor(skills_data_filtered$skills_list, levels = skills_data_filtered$skills_list[order(skills_data_filtered$avg_min_sal, decreasing = FALSE)])
skills_data_filtered$avg_min_sal <- parse_number(skills_data_filtered$avg_min_sal)
ggplot(skills_data_filtered, aes(x = skills_list, y = avg_min_sal, fill = skills_list)) +
geom_bar(stat = "identity", show.legend = FALSE) +
labs(title = "Average Minimum Salary by Skill", x = "Skill", y = "Average Minimum Salary (dollars per year)") +
coord_flip()
knitr::opts_chunk$set(echo = TRUE)
## load libraries
library(tidyr)
library(tidyverse)
library(dplyr)
library(knitr)
library(ggplot2)
library(scales)
data_scientist_skills_list <- read.csv("https://raw.githubusercontent.com/samato0624/DATA607_Project3/main/docs/data_scientist_skills.csv")
data_scientist_skills_list <- data_scientist_skills_list[-1,]
unique_skills_list <- data.frame(skills_list = unlist(data_scientist_skills_list))
unique_skills_list <- unique_skills_list %>%
filter(skills_list != "") %>%
group_by(skills_list) %>%
mutate(count = length(skills_list)) %>%
distinct(skills_list,count) %>%
arrange(desc(count), skills_list)
rownames(unique_skills_list) <- NULL
final_skills_list <- unique_skills_list[c(1:9,12,13,17,19,22,24,27:29,32,34,36:37,39,40,43,45,47:50,52,53,58,59,61,62,64,66,71,72,76,77,79:81,83:87),1]
final_skills_list <- final_skills_list %>% arrange(skills_list)
final_skills_list$skills_list <- tolower(final_skills_list$skills_list)
final_skills_list$skills_list[38] <- " r "
kable(final_skills_list, format = "pipe", col.names = c(""), caption = "Skills for Data Scientists", align = "c")
raw_data <- read.csv("https://raw.githubusercontent.com/samato0624/DATA607_Project3/main/Raw_Data.csv")
skills <- raw_data %>%
# removed unnecessary characters
mutate(Pay.Range = (str_remove_all(Pay.Range, "[$yr////, ]"))) %>%
# extracted the low end of the pay range
mutate(Pay_Min = as.numeric(str_extract(Pay.Range, "\\d+(?=-)"))) %>%
# extracted the high end of the pay range
mutate(Pay_Max = as.numeric(str_extract(Pay.Range, "(?<=-)[0-9]+"))) %>%
# selected important columns
select(c(2, 3, 5, 6, 7, 8))
skills_data <- final_skills_list
for(i in 1:nrow(skills_data)) {
skills_data$postings[i] <- as.numeric(skills %>% filter(str_detect(tolower(About.the.job),skills_data$skills_list[i])) %>% summarise(n = n()))
}
skills_data <- skills_data %>% filter(postings != 0)
for(i in 1:nrow(skills_data)) {
skills_data$avg_min_sal[i] <- as.numeric(skills %>% drop_na(Pay_Min) %>% filter(str_detect(tolower(About.the.job),skills_data$skills_list[i])) %>% summarise(avg = mean(Pay_Min)))
}
skills_data$avg_min_sal <- dollar(skills_data$avg_min_sal)
kable(skills_data, format = "pipe", col.names = c("Skill", "Number of Postings", "Average Minimum Salary"), caption = "Skills for Data Scientists", align = "c", digits = 0)
## filter for five or more postings
skills_data_filtered <- skills_data %>% filter(postings >= 5)
## arrange in descending order by number of postings
skills_data_filtered$skills_list <- factor(skills_data_filtered$skills_list, levels = skills_data_filtered$skills_list[order(skills_data_filtered$postings, decreasing = FALSE)])
## create bar graph
ggplot(skills_data_filtered, aes(x = skills_list, y = postings, fill = skills_list)) +
geom_bar(stat = "identity", show.legend = FALSE) +
labs(title = "Number of Postings by Skill", x = "Skill", y = "Frequency") +
coord_flip()
## arrange in descending order by average minimum salary
skills_data_filtered$skills_list <- factor(skills_data_filtered$skills_list, levels = skills_data_filtered$skills_list[order(skills_data_filtered$avg_min_sal, decreasing = FALSE)])
## convert average minimum salary to number
skills_data_filtered$avg_min_sal <- parse_number(skills_data_filtered$avg_min_sal)
## create bar graph
ggplot(skills_data_filtered, aes(x = skills_list, y = avg_min_sal, fill = skills_list)) +
geom_bar(stat = "identity", show.legend = FALSE) +
labs(title = "Average Minimum Salary by Skill", x = "Skill", y = "Average Minimum Salary (dollars per year)") +
coord_flip()
# Chunk 1: global_options
knitr::opts_chunk$set(eval = TRUE, message = FALSE, warning = FALSE)
# Chunk 2: load-packages
library(tidyverse)
library(openintro)
data('hfi', package='openintro')
# Chunk 3
hfi
# Chunk 4
plot(hfi$pf_expression_control, hfi$pf_score)
# Chunk 5: cor
hfi %>%
summarise(cor(pf_expression_control, pf_score, use = "complete.obs"))
# Chunk 8: m1
m1 <- lm(pf_score ~ pf_expression_control, data = hfi)
# Chunk 9: summary-m1
summary(m1)
# Chunk 10
m2 <- lm(hf_score ~ pf_expression_control, data = hfi)
summary(m2)
# Chunk 11: reg-with-line
ggplot(data = hfi, aes(x = pf_expression_control, y = pf_score)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
prediction <- hfi %>%
filter(pf_expression_control == 6.7)
prediction
prediction <- hfi %>%
filter(pf_expression_control == 6.75)
prediction
prediction <- hfi %>%
filter(pf_expression_control == 6.75)
mean(prediction$pf_expression_control)
prediction <- hfi %>%
filter(pf_expression_control == 6.75)
mean(prediction$pf_score)
ggplot(data = m1, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
ggplot(data = m1, aes(x = .resid)) +
geom_histogram(binwidth = 25) +
xlab("Residuals")
ggplot(data = m1, aes(x = .resid)) +
geom_histogram(binwidth = 25) +
xlab("Residuals")
ggplot(data = m1, aes(sample = .resid)) +
stat_qq()
ggplot(data = m1, aes(x = .resid)) +
geom_histogram(binwidth = 25) +
xlab("Residuals")
knitr::opts_chunk$set(eval = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(openintro)
data('hfi', package='openintro')
hfi
plot(hfi$pf_expression_control, hfi$pf_score)
hfi %>%
summarise(cor(pf_expression_control, pf_score, use = "complete.obs"))
# This will only work interactively (i.e. will not show in the knitted document)
hfi <- hfi %>% filter(complete.cases(pf_expression_control, pf_score))
DATA606::plot_ss(x = hfi$pf_expression_control, y = hfi$pf_score)
